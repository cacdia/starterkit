from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, UTC
import os

HOST = "0.0.0.0"
PORT = int(os.environ.get("PORT", "7123"))

{% if include_pydantic %}
from pydantic import BaseModel, field_validator
{% else %}
import json
from typing import TypedDict
{% endif %}


{% if include_pydantic %}


class HelloResponse(BaseModel):
    message: str
    now: datetime  # ISO 8601

    @field_validator("now")
    @classmethod
    def _tz_aware(cls, v: datetime) -> datetime:
        if v.tzinfo is None or v.tzinfo.utcoffset(v) is None:
            raise ValueError("datetime precisa ter timezone")
        return v

    def to_json_bytes(self) -> bytes:
        return self.model_dump_json().encode("utf-8")

{% else %}

class HelloResponseDict(TypedDict):
    message: str
    now: str  # ISO 8601 string


def make_hello_response() -> HelloResponseDict:
    # datetime.isoformat() produces an offset-aware string when tz-aware
    now = datetime.now(UTC).astimezone().isoformat()
    return {"message": "Hello, world!", "now": now}

{% endif %}


class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/":
            {% if include_pydantic %}
            payload = HelloResponse(
                message="Hello, world!",
                now=datetime.now(UTC).astimezone(),
            )
            body = payload.to_json_bytes()
            {% else %}
            payload = make_hello_response()
            body = json.dumps(payload, ensure_ascii=False).encode("utf-8")
            {% endif %}
            self.send_response(200)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.send_header("Content-Length", str(len(body)))
            self.end_headers()
            self.wfile.write(body)
        else:
            self.send_error(404, "Not Found")


if __name__ == "__main__":
    with HTTPServer((HOST, PORT), Handler) as httpd:
        print(f"servindo em http://{HOST}:{PORT} (CTRL+C para sair)")
        httpd.serve_forever()

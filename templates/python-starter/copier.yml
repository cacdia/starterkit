_min_copier_version: "9.0.0"

# Register the answers file to support updates safely
_answers_file: .copier-answers.yml

# Friendly messages
_message_before_copy: |
    Vou gerar um projeto Python com as opções abaixo. Se tiver dúvida, aceite os padrões sugeridos.

_message_after_copy: |
    Projeto "{{ project_name }}" criado com sucesso.
    Próximos passos:
      1) cd {{ _copier_conf.dst_path }}{{ _copier_conf.sep }}{{ project_name }}
      2) uv sync
      3) uv run python --version
      {% if include_ruff %}4) uv run ruff check . --fix{% endif %}
      {% if include_pre_commit %}5) uv run pre-commit install{% endif %}

_message_before_update: |
    Atualizarei seu projeto com as novas opções. Você poderá revisar valores pré-preenchidos.

_message_after_update: |
    Projeto "{{ project_name }}" atualizado com sucesso!
    Revise arquivos com conflitos (se houver), faça os ajustes e confirme as mudanças no Git.

# Render all files as templates (permite Jinja em JSON/MD). Mantenha vazio conscientemente.
_templates_suffix: ".jinja"

# Conditionally exclude optional folders/files
_exclude:
    - "copier.yaml"
    - "copier.yml"
    - "~*"
    - "*.py[co]"
    - "__pycache__"
    - ".git"
    - ".DS_Store"
    - ".svn"
    # VSCode/Copilot
    - "{% if not include_vscode %}{{ project_name }}/.vscode{% endif %}"
    - "{% if include_vscode and not include_copilot %}{{ project_name }}/.vscode/copilot{% endif %}"
    - "{% if include_vscode and not include_copilot %}{{ project_name }}/.vscode/mcp.json{% endif %}"
    # Pre-commit opcional (somente se Ruff habilitado)
    - "{% if (not include_pre_commit) or (not include_ruff) %}**/.pre-commit-config.yaml{% endif %}"
    # Tests
    - "{% if not include_tests %}{{ project_name }}/tests/**{% endif %}"
    # Makefile (opcional)
    - "{% if not include_makefile %}{{ project_name }}/Makefile{% endif %}"
    # Ruff opcional
    - "{% if not include_ruff %}{{ project_name }}/ruff.toml{% endif %}"
    # README opcional
    - "{% if not include_readme %}{{ project_name }}/README.md{% endif %}"
    # MkDocs opcional
    - "{% if not include_mkdocs %}{{ project_name }}/mkdocs.yml{% endif %}"
    - "{% if not include_mkdocs %}{{ project_name }}/docs/**{% endif %}"

# =====================
# Perguntas (Answers)
# =====================

project_name:
    type: str
    help: Nome do projeto (slug simples, sem espaços)
    default: python-starter
    validator: >-
        {% if not (project_name | regex_search('^[a-zA-Z0-9_.-]+$')) %}
        Use apenas letras, números, ponto, hífen ou underscore.
        {% endif %}

package_name:
    type: str
    when: false
    help: Nome do projeto em snake_case (derivado automaticamente)
    default: "{{ project_name | lower | replace(' ', '_') | replace('-', '_') | replace('.', '_') }}"

python_version:
    type: str
    help: Versão do Python a ser usada
    choices:
        - "3.13"
        - "3.12"
    default: "3.13"

# Booleans diretos para simplificar escolhas
include_ruff:
    type: bool
    help: Incluir Ruff (formatter+linter)?
    default: true

include_pre_commit:
    type: bool
    help: Incluir pre-commit com hooks do Ruff?
    default: true

include_jupyter:
    type: bool
    help: Incluir suporte a Jupyter?
    default: false

include_pydantic:
    type: bool
    help: Incluir Pydantic 2.x?
    default: false

include_tests:
    type: bool
    help: Incluir estrutura de testes?
    default: true

include_makefile:
    type: bool
    help: Incluir Makefile com alvos úteis?
    default: true

include_mkdocs:
    type: bool
    help: Incluir documentação com MkDocs Material?
    default: false

include_vscode:
    type: bool
    help: Incluir configurações do VS Code (.vscode)?
    default: true

include_copilot:
    type: bool
    help: Incluir configurações do Copilot (arquivos em .vscode/copilot)?
    default: true
    when: "{{ include_vscode }}"

include_readme:
    type: bool
    help: Incluir README.md inicial?
    default: true